<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-init-method="init"
       default-destroy-method="destroy">
    <!-- 为了与容器中bean生命周期的管理进行交互，你可以实现Spring的InitializingBean和DisposableBean接口。当初始化bean时
    容器会调用InitializingBean中的afterPropertiesSet方法，当销毁beans时容器会调用DisposableBean中的destroy方法，在这2个
    方法中bean可以执行特定的行为。
    在现在应用中，通常认为JSR-250的@PostConstruct和@PreDestroy注解是最佳实践接收生命周期的方法，使用这些注解意味你的bean
    没有耦合Spring特定的接口。除了初始化回调函数和销毁回调函数之外，Spring管理的对象也可以实现Lifecycle接口，这些对象可以
    参与容器自身生命周期驱动的启动和关闭过程。
    建议不使用InitializingBean接口，因为他对代码与Spring进行了不必要的耦合。作为一种替代方法，你可以使用@PostConstruct注解
    或制定一个POJO的初始化方法。在基于XML配置元数据的情况下，你可以使用init-method特性来指定方法的名称，方法时没有返回值
    和参数的。如果使用@Bean的initMethod特性，请看“接收生命周期回调函数”小节，以下代码和AnotherExampleBean是等价的-->
    <bean id="exampleInitBean" class="com.pansy.ExampleBean" init-method="init"/>
    <!-- 销毁回调函数也相同-->
    <bean id="exampleDestroyBean" class="com.pansy.ExampleBean2" destroy-method="cleanup"/>
    <!-- 默认初始化和销毁方法，在beans元素上添加default-init-method属性，假设你的初始化回调方法名为init，销毁回调方法
    名为destroy，你的类如DefaultBlogService-->
    <bean id="blogDao" class="com.pansy.BlogDao"/>
    <bean id="blogService" class="com.pansy.DefaultBlogService">
        <property name="blogDao" ref="blogDao"/>
    </bean>
    <!-- 在Spring2.5开始，在控制bean的生命周期行为时，有三种选择：InitializingBean和DisposableBean回调接口；定制init接口
    和destroy接口，@PostConstruct和@PreDestroy注解。在控制一个给定bean时你可以组合这些机制。
    同一个bean配置了多生命周期机制，并有不同的初始化方法时，那么调用顺序如下：
    先调用注解@PostConstruct
    然后调用InitializingBean回调接口定义的afterPropertiesSet方法
    最后调用定制配置的init方法
    销毁回调函数调用顺序相同
    -->
    <!-- 当ApplicationContext创建一个实现org.springframework.context.ApplicationContextAware接口的对象实例时，这个实例
    会提供一个ApplicationContext的引用，因此beans可以以编程的方式创建他们的ApplicationContext，通过ApplicationContext
    接口，或通过将引用抛给这个接口的一个已知子类，例如ConfigurableApplicationContext，它暴露了额外的功能。一个方法是编程
    式检索其他bean。有时这个能力是很有用的，但是通常你应该避免使用它，因为它耦合了Spring和代码，不能遵循控制反转的风格。
    ApplicationContext的其它方法提供了对文件资源的访问，发布应用事件，访问MessageSource的功能。这些额外的特性讲在3.15小节
    ApplicationContext的额外能力中讲述
    从Spring2.5开始，自动装配是另一种可替代的获得ApplicationContext引用的方法。传统的constructor和byType自动装配模式可以
    分别为构造器函数参数和setter方法参数提供ApplicationContext类型的依赖。更多的灵活性包括自动装配变量的能力和多参数方法
    使用新的基于注解的自动装配特性。如果你这么做的话，ApplicationContext可以被自动装配到变量中，构造函数参数中和方法参数
    中，如果讨论的变量，构造参数和方法有@Autowired注解，那么可以期待它是ApplicationContext类型。更多请看3.9.2小节
    当ApplicationContext创建了一个实现了org.springframework,beans.factory.BeanFactory.BeanNameAware接口的类时，类中有相关
    的对象定义中定义的名称的引用。在正常的bean属性填入之后，回调方法调用，但在初始化方法调用之前，例如InitializingBean的
    afterPropertiesSet或一个定制的初始化方法-->
    <!-- 其他Aware见文档3.6.3-->

    <!-- 3.7 Bean定义继承-->
    <!-- Bean定义中可以包含许多配置信息，包括构造函数参数、属性值和容器的特定信息例如初始化方法，静态工厂方法名等等。子定义
    继承父定义的配置信息。子定义可以覆盖一些值，或按需要添加一些值。使用父子bean定义可以保存许多类型。
    如果你以编程方式使用ApplicationContext接口，那么子bean定义是通过ChildBeanDefinition定义来表示的。大多数用户不在这个层级
    上使用，而是在一些像ClassPathXmlApplicationContext中声明式的配置bean定义。当你使用基于XML的配置元数据时，你可以使用parent
    特性来指明一个子bean定义。在特性值中指定父bean-->
    <!-- 如果子bean定义中没有指定要使用的bean类，则使用父定义中的bean类，但也可以覆盖它。在后一种情况下，子bean定义必须与父
    bean定义协作，也就是说，必须接收父定义的属性值。-->
    <bean id="inheritedTestBean" abstract="true" class="com.pansy.TestBean">
        <property name="name" value="parent"/>
        <property name="age" value="1"/>
    </bean>
    <bean id="inheritsWithDifferentClass" class="com.pansy.DerivedTestBean" parent="inheritedTestBean"
          init-method="initialize">
        <property name="name" value="override"/>
    </bean>
    <!-- 子bean定义可以继承作用域，构造函数参数，属性值，可以重写父方法，可以选择添加新值。你指定的任何作用域，初始化方法
    析构方法，或静态工厂方法设置会覆盖父定义的设置。其余的设置都是从子定义中获取：依赖关系，自动装配模式，依赖检查，单例
    延迟初始化。
    -->
    <!-- 前面的例子使用抽象特性将父bean定义显式的标记为abstract。如果父定义没有指定一个类，需要显示的将父bean定义abstract-->
    <bean id="inheritedTestBeanWithoutClass" abstract="true">
        <property name="name" value="parent"/>
        <property name="age" value="1"/>
    </bean>
    <bean id="inheritsWithClass" class="com.pansy.DerivedTestBean2" parent="inheritedTestBeanWithoutClass"
          init-method="initialize">
        <property name="name" value="override"/>
    </bean>
    <!-- 父bean定义不能实例化，因为它不完整，并且它被显式的标记为abstract。当一个bean定义是abstract时，它只能是一个纯粹的
    bean定义模板，作为一个为子定义服务的父定义。当试图使用一个abstract父定义时，如通过另一个bean的ref属性或通过父bean定义的
    id为参数显式的调用getBean方法，会返回一个错误。类似的，容器内部的preInstantiateSingletons方法会忽略抽象bean定义。-->

    <!-- 3.8 容器扩展点-->
    <!-- BeanPostProcessor接口定义了回调方法，你可以实现这个方法来提供你自己的实例化逻辑，依赖解析逻辑等等。如果你想在Spring
    容器完成实例化，配置和初始化bean之后实现一些定制的业务逻辑，你可以插入一个或多个BeanPostProcessor实现。你可以配置多个
    BeanPostProcessor实例，通过设置Order属性来控制BeanPostProcessor的执行顺序。只有BeanPostProcessor实现了Order接口你才可以
    设置这个属性;如果你编写了自己的BeanPostProcessor，你也应该考虑实现Order接口-->
    <!-- org.springframework.beans.factory.config.BeanPostProcessor接口包含恰好两个回调方法。当这样一个类在容器中注册为后
    处理器时，对于容器中创建的每一个bean实例，在容器初始化方法（例如InitializingBean的afterPropertiesSet方法和任何已声明的
    初始化方法）被调用之前和任何bean回调函数之后，后处理器会从容器中得到一个回调函数。
    ApplicationContext会自动检测任何配置元数据中定义的实现了BeanPostProcessor接口的Bean。为了能在后面bean创建时调用这些bean
    ApplicationContext会将这些bean注册为后处理器，bean后处理器可以像其他bean一样在容器中进行部署。-->
    <!-- 由于BeanPostProcessor需要早一点实例化，为了在上下文中初始化其他的beans，早期的类型检测是非常关键的。虽然推荐的注册
    BeanPostProcessor的方法是通过ApplicationContext自动检测（像前面描述的那样），但也可以通过以编程方法使用ConfigurableBeanFactory
    的addBeanPostProcessor方法来注册，这在注册之前需要评估条件逻辑或通过分层中的上下文来复制bean后处理器的情况下，是非常有用的。
    注意以编程方式添加的BeanPostProcessor不需要Order接口。这种情况下注册顺序意味着执行顺序。注意以编程方式注册的BeanPostProcessor
    是在那些通过自动检测注册的BeanPostProcessor之前进行处理，不管任何显示的顺序指定。
    实现BeanPostProcessor接口的类是被特别的并被容器不同对待的。所有的BeanPostProcessor和它们直接引用的Beans在启动时进行实例
    化，它们是ApplicationContext特定启动阶段的一部分。接下来，BeanPostProcessor以有序形式进行注册，并适用于容器中的所有更进
    一步的beans。-->
    <!-- 第一个例子阐述了基本用法-->
    <bean id="exampleBean" class="com.pansy.ExampleBean"/>
    <!-- when the above bean is instantiated, this custom BeanPostProcessor implementation will output the
    fact to the system console-->
    <bean class="com.pansy.InstantiationTracingBeanPostProcessor"></bean>
    <!-- 使用回调函数接口或注解结合定制BeanPostProcessor实现是扩展Spring IOC容器的常见方法。一个例子是Spring的
    RequiredAnnotationBeanPostProcessor 一个BeanPostProcessor实现附带在Spring发行中，它保证了标记有（任意）注解的Beans上的
    JavaBean属性能真正的（配置成）通过值进行依赖注入-->
</beans>